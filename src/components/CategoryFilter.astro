---
import { getCollection } from 'astro:content';

const { currentCategory } = Astro.props;

// Get all categories
const categories = await getCollection('categories');

// Sort categories by name
const sortedCategories = categories.sort((a, b) => a.data.name.localeCompare(b.data.name));
---

<div class="mb-8">
  <div class="flex items-center justify-between border-b border-gray-200">
    <nav class="flex space-x-8 overflow-x-auto">
      <!-- All filter -->
      <a
        href="/blog"
        class={`whitespace-nowrap border-b-2 py-4 px-1 text-sm font-medium transition-colors ${
          !currentCategory
            ? 'border-blue-500 text-blue-600'
            : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
        }`}
      >
        All
      </a>

      <!-- Category filters -->
      {
        sortedCategories.map((category) => (
          <a
            href={`/blog/${category.id}`}
            class={`border-b-2 px-1 py-4 text-sm font-medium whitespace-nowrap transition-colors ${
              currentCategory === category.id
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
            }`}
          >
            {category.data.name}
          </a>
        ))
      }
    </nav>

    <!-- Search Input -->
    <div class="flex items-center gap-2 pb-4">
      <div class="relative">
        <input
          type="text"
          placeholder="Search blog"
          class="w-64 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder-gray-500 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none"
          id="blog-search"
        />
        <div class="absolute inset-y-0 right-0 flex items-center pr-3">
          <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
      <button
        class="rounded-md border border-gray-300 bg-white p-2 text-gray-400 hover:text-gray-600"
        id="clear-search"
        title="Clear search"
      >
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script defer is:inline>
  let pagefind;

  document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('blog-search');
    const clearButton = document.getElementById('clear-search');
    const blogList = document.querySelector('.blog-list');
    const pagination = document.querySelector('.pagination');

    if (!searchInput || !blogList) return;

    // Store original blog posts HTML for reset
    const originalHTML = blogList.innerHTML;

    async function initPagefind() {
      if (!pagefind) {
        pagefind = await import('/pagefind/pagefind.js');
        await pagefind.options({
          ranking: {
            pageLength: 0.5,
          },
        });
        pagefind.init();
      }
    }

    function togglePagination(show) {
      if (pagination) {
        pagination.style.display = show ? 'flex' : 'none';
      }
    }

    function formatDate(dateString) {
      if (!dateString) return 'Recent';
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric',
        });
      } catch {
        return 'Recent';
      }
    }

    let activeIndex = -1;

    function initKeyboardNavigation() {
      const results = document.querySelectorAll('.search-result');
      activeIndex = -1;

      // Add click handlers to results
      results.forEach((result, index) => {
        result.addEventListener('click', () => {
          const url = result.getAttribute('data-url');
          if (url) window.location.href = url;
        });

        result.addEventListener('mouseenter', () => {
          setActiveIndex(index);
        });
      });
    }

    function setActiveIndex(index) {
      const results = document.querySelectorAll('.search-result');

      // Remove active class from all results
      results.forEach((result) => {
        result.querySelector('div').classList.remove('bg-blue-50');
        result.querySelector('div').classList.add('hover:bg-gray-50');
      });

      // Add active class to current result
      if (index >= 0 && index < results.length) {
        activeIndex = index;
        const activeResult = results[activeIndex];
        activeResult.querySelector('div').classList.add('bg-blue-50');
        activeResult.querySelector('div').classList.remove('hover:bg-gray-50');
        activeResult.scrollIntoView({ block: 'nearest' });
      }
    }

    function navigateToActive() {
      const results = document.querySelectorAll('.search-result');
      if (activeIndex >= 0 && activeIndex < results.length) {
        const url = results[activeIndex].getAttribute('data-url');
        if (url) window.location.href = url;
      }
    }

    async function performSearch(query) {
      if (!query.trim()) {
        // Show all posts when search is empty
        blogList.innerHTML = originalHTML;
        togglePagination(true);
        return;
      }

      // Hide pagination during search
      togglePagination(false);

      // Initialize pagefind if not already done
      await initPagefind();

      try {
        const searchResults = await pagefind.search(query);
        const results = await Promise.all(
          searchResults.results.map(async (result) => await result.data())
        );

        // Filter for blog posts only using meta tags
        const blogResults = results.filter((result) => {
          const url = result.url;
          const meta = result.meta || {};

          // Must include '/blog/'
          if (!url.includes('/blog/')) return false;

          // Exclude main blog page
          if (url.endsWith('/blog/') || url.endsWith('/blog')) return false;

          // Exclude category pages (identified by page_type meta tag)
          if (meta.page_type === 'category') return false;

          // Include individual blog posts (either no page_type or page_type === 'post')
          return true;
        });

        if (blogResults.length === 0) {
          blogList.innerHTML = `
            <div class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.42-1.007-5.879-2.615M15 6.5a7.966 7.966 0 00-6-2.915c-1.226.134-2.365.46-3.374 1.024" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No posts found</h3>
              <p class="mt-1 text-sm text-gray-500">Try adjusting your search terms.</p>
            </div>
          `;
        } else {
          // Generate HTML for filtered posts using Pagefind results
          const postsHTML = blogResults
            .map((result, index) => {
              // Extract metadata from Pagefind result
              const meta = result.meta || {};
              const authorName = meta.author_name || 'Unknown';
              const authorAvatar = meta.author_avatar || '';
              const categoryName = meta.category_name || 'Blog';
              const formattedDate = formatDate(meta.date);
              const authorInitial = authorName.charAt(0).toUpperCase();

              return `
              <article class="search-result group border-b border-gray-100 last:border-b-0" data-index="${index}" data-url="${result.url}">
                <div class="flex items-center gap-6 px-4 py-4 transition-colors hover:bg-gray-50 focus:bg-blue-50 cursor-pointer">
                  <div class="min-w-0 flex-1">
                    <h2 class="text-base font-medium text-gray-900 transition-colors group-hover:text-blue-600">
                      ${result.meta?.title || result.title}
                    </h2>
                    ${result.excerpt ? `<p class="mt-1 text-sm text-gray-600 line-clamp-2">${result.excerpt}</p>` : ''}
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="flex -space-x-1">
                      ${
                        authorAvatar
                          ? `<img src="${authorAvatar}" alt="${authorName}" class="h-6 w-6 rounded-full border-2 border-white ring-1 ring-gray-200 object-cover" />`
                          : `<div class="flex h-6 w-6 items-center justify-center rounded-full bg-gradient-to-br from-blue-400 to-blue-600 text-xs font-medium text-white ring-1 ring-gray-200">
                          ${authorInitial}
                        </div>`
                      }
                    </div>
                  </div>
                  <div class="flex items-center">
                    <span class="inline-flex items-center rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700">
                      ${categoryName}
                    </span>
                  </div>
                  <div class="min-w-[100px] text-right text-sm whitespace-nowrap text-gray-500">
                    <time datetime="${meta.date || ''}">
                      ${formattedDate}
                    </time>
                  </div>
                </div>
              </article>
            `;
            })
            .join('');

          blogList.innerHTML = postsHTML;

          // Initialize keyboard navigation
          initKeyboardNavigation();
        }
      } catch (error) {
        console.error('Search error:', error);
        blogList.innerHTML = `
          <div class="text-center py-12">
            <p class="text-sm text-gray-500">Search temporarily unavailable. Please try again.</p>
          </div>
        `;
      }
    }

    // Initialize pagefind on first focus
    searchInput.addEventListener('focus', initPagefind);

    // Handle search input with debouncing
    let searchTimeout;
    searchInput.addEventListener('input', function (e) {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch(e.target.value);
      }, 300);
    });

    // Handle keyboard navigation and ESC key
    searchInput.addEventListener('keydown', function (e) {
      const results = document.querySelectorAll('.search-result');

      if (e.key === 'Escape') {
        e.target.value = '';
        performSearch('');
        e.target.blur();
        activeIndex = -1;
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (results.length > 0) {
          const nextIndex = activeIndex < results.length - 1 ? activeIndex + 1 : 0;
          setActiveIndex(nextIndex);
        }
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (results.length > 0) {
          const prevIndex = activeIndex > 0 ? activeIndex - 1 : results.length - 1;
          setActiveIndex(prevIndex);
        }
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (activeIndex >= 0) {
          navigateToActive();
        }
      }
    });

    // Handle clear button
    clearButton.addEventListener('click', function () {
      searchInput.value = '';
      performSearch('');
      searchInput.focus();
    });
  });
</script>
