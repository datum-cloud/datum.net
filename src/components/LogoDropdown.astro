---
// src/components/LogoDropdown.astro
export interface Props {
  id?: string;
  class?: string;
  triggerElementId?: string;
}

const { id = 'logo-dropdown', class: className = '', triggerElementId = 'logo-link' } = Astro.props;
---

<div class={`logo-dropdown ${className}`} id={id} data-trigger-id={triggerElementId}>
  <div class="logo-dropdown-item">
    <div class="logo-preview">
      <div class="logo-preview-bg logo-preview-bg--light">
        <svg
          viewBox="0 0 88 70"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          class="logo-preview-svg"
        >
          <path
            d="M38.9208 6.48499e-05C38.3683 6.48499e-05 37.9178 0.449142 37.9178 1.00306C37.9178 1.55697 37.9178 10.8035 37.9178 10.8035C37.9178 11.356 38.3669 11.7816 38.9208 11.7816L43.6801 11.8065C45.6464 11.8065 47.5193 12.5743 48.9543 13.9669C50.3979 15.3694 51.204 17.2209 51.2267 19.183C51.2493 21.1933 50.4829 23.0859 49.0705 24.5139C47.6581 25.9419 45.7739 26.7281 43.7651 26.7281H43.6801C41.7181 26.7055 39.8665 25.8994 38.464 24.4558C37.0714 23.0222 36.2815 21.1479 36.2815 19.1816V14.3664C36.2815 13.8139 35.8545 13.4179 35.3006 13.4179H25.503C24.9505 13.4179 24.5 13.8125 24.5 14.3664V24.1668C24.5 24.7193 24.9491 25.1994 25.503 25.1994H33.2365C34.2764 25.1994 34.9464 25.184 35.4989 25.2591C36.2328 25.3582 36.7243 25.5679 37.0955 25.9376C37.4667 26.3074 37.6749 26.8004 37.7741 27.5342C37.8492 28.0881 37.9178 28.7568 37.9178 29.798V37.5301C37.9178 38.0826 38.3124 38.6172 38.8663 38.6172H43.7665C45.9666 38.6172 48.127 38.1634 50.1882 37.4352C57.8708 34.7195 63.0331 27.418 63.0331 19.2666C63.0331 11.1152 57.8708 3.81371 50.1882 1.09797C48.127 0.369812 45.9666 6.48499e-05 43.7665 6.48499e-05H38.9222H38.9208Z"
            fill="#C49D9D"></path>
          <path
            d="M72.5026 59.2735H72.4672L71.6529 69.6812H69.4219L70.2362 56.8086H73.6181L78.2954 66.7595L83.0436 56.8086H86.3547L87.169 69.6812H84.938L84.1237 59.2735H84.0883L79.3047 69.6812H77.3039L72.5026 59.2735Z"
            fill="#0C1D31"></path>
          <path
            d="M65.4663 64.1568C65.4663 65.1956 65.3069 66.0868 64.9882 66.8305C64.6695 67.5623 64.215 68.1644 63.6248 68.6365C63.0346 69.1087 62.3145 69.4569 61.4646 69.6812C60.6265 69.8937 59.6822 69.9999 58.6316 69.9999C57.581 69.9999 56.6307 69.8937 55.7808 69.6812C54.9427 69.4569 54.2286 69.1087 53.6383 68.6365C53.0481 68.1644 52.5937 67.5623 52.2749 66.8305C51.9562 66.0868 51.7969 65.1956 51.7969 64.1568V56.8086H54.3112V63.9797C54.3112 64.5109 54.3702 65.0126 54.4883 65.4848C54.6063 65.9451 54.8247 66.3524 55.1434 66.7065C55.4621 67.0607 55.8989 67.3381 56.4537 67.5387C57.0203 67.7394 57.7463 67.8397 58.6316 67.8397C59.5169 67.8397 60.237 67.7394 60.7918 67.5387C61.3584 67.3381 61.801 67.0607 62.1198 66.7065C62.4385 66.3524 62.6569 65.9451 62.7749 65.4848C62.8929 65.0126 62.952 64.5109 62.952 63.9797V56.8086H65.4663V64.1568Z"
            fill="#0C1D31"></path>
          <path
            d="M39.6296 58.9688H33.875V56.8086H47.8985V58.9688H42.1439V69.6812H39.6296V58.9688Z"
            fill="#0C1D31"></path>
          <path
            d="M23.7139 56.8086H26.5824L32.8328 69.6812H30.1768L28.8311 66.7242H21.4121L20.0487 69.6812H17.375L23.7139 56.8086ZM27.8395 64.564L25.1481 58.8271L22.4568 64.564H27.8395Z"
            fill="#0C1D31"></path>
          <path
            d="M0.265625 56.8086H6.4629C7.47807 56.8086 8.42832 56.9266 9.31365 57.1627C10.2108 57.387 10.9899 57.7529 11.6509 58.2605C12.3119 58.7563 12.8313 59.4114 13.2091 60.2259C13.5986 61.0286 13.7934 62.0084 13.7934 63.1652C13.7934 64.263 13.6163 65.2192 13.2622 66.0337C12.9081 66.8482 12.4123 67.5269 11.7748 68.0699C11.1374 68.6129 10.376 69.0202 9.49071 69.2917C8.60538 69.5514 7.63153 69.6812 6.56914 69.6812H0.265625V56.8086ZM5.32968 67.521C6.40388 67.521 7.31281 67.4384 8.05648 67.2731C8.81196 67.1079 9.42579 66.8482 9.89796 66.494C10.3819 66.1399 10.7302 65.6913 10.9426 65.1484C11.1669 64.6054 11.2791 63.9561 11.2791 63.2006C11.2791 62.4097 11.1669 61.7487 10.9426 61.2175C10.7184 60.6745 10.3642 60.2378 9.88025 59.9072C9.40808 59.5767 8.79426 59.3406 8.03878 59.199C7.2833 59.0455 6.38027 58.9688 5.32968 58.9688H2.77995V67.521H5.32968Z"
            fill="#0C1D31"></path>
        </svg>
      </div>
    </div>
    <div class="logo-dropdown-content">
      <span class="logo-dropdown-filename">logo-light.svg</span>
      <div class="logo-dropdown-actions">
        <button class="logo-dropdown-action" data-action="copy" data-logo="light">Copy</button>
        <button class="logo-dropdown-action" data-action="download" data-logo="light"
          >Download</button
        >
      </div>
    </div>
  </div>

  <div class="logo-dropdown-item">
    <div class="logo-preview">
      <div class="logo-preview-bg logo-preview-bg--dark">
        <svg
          viewBox="0 0 88 70"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          class="logo-preview-svg"
        >
          <path
            d="M38.9208 6.48499e-05C38.3683 6.48499e-05 37.9178 0.449142 37.9178 1.00306C37.9178 1.55697 37.9178 10.8035 37.9178 10.8035C37.9178 11.356 38.3669 11.7816 38.9208 11.7816L43.6801 11.8065C45.6464 11.8065 47.5193 12.5743 48.9543 13.9669C50.3979 15.3694 51.204 17.2209 51.2267 19.183C51.2493 21.1933 50.4829 23.0859 49.0705 24.5139C47.6581 25.9419 45.7739 26.7281 43.7651 26.7281H43.6801C41.7181 26.7055 39.8665 25.8994 38.464 24.4558C37.0714 23.0222 36.2815 21.1479 36.2815 19.1816V14.3664C36.2815 13.8139 35.8545 13.4179 35.3006 13.4179H25.503C24.9505 13.4179 24.5 13.8125 24.5 14.3664V24.1668C24.5 24.7193 24.9491 25.1994 25.503 25.1994H33.2365C34.2764 25.1994 34.9464 25.184 35.4989 25.2591C36.2328 25.3582 36.7243 25.5679 37.0955 25.9376C37.4667 26.3074 37.6749 26.8004 37.7741 27.5342C37.8492 28.0881 37.9178 28.7568 37.9178 29.798V37.5301C37.9178 38.0826 38.3124 38.6172 38.8663 38.6172H43.7665C45.9666 38.6172 48.127 38.1634 50.1882 37.4352C57.8708 34.7195 63.0331 27.418 63.0331 19.2666C63.0331 11.1152 57.8708 3.81371 50.1882 1.09797C48.127 0.369812 45.9666 6.48499e-05 43.7665 6.48499e-05H38.9222H38.9208Z"
            fill="#E6F59E"></path>
          <path
            d="M72.5026 59.2735H72.4672L71.6529 69.6812H69.4219L70.2362 56.8086H73.6181L78.2954 66.7595L83.0436 56.8086H86.3547L87.169 69.6812H84.938L84.1237 59.2735H84.0883L79.3047 69.6812H77.3039L72.5026 59.2735Z"
            fill="white"></path>
          <path
            d="M65.4663 64.1568C65.4663 65.1956 65.3069 66.0868 64.9882 66.8305C64.6695 67.5623 64.215 68.1644 63.6248 68.6365C63.0346 69.1087 62.3145 69.4569 61.4646 69.6812C60.6265 69.8937 59.6822 69.9999 58.6316 69.9999C57.581 69.9999 56.6307 69.8937 55.7808 69.6812C54.9427 69.4569 54.2286 69.1087 53.6383 68.6365C53.0481 68.1644 52.5937 67.5623 52.2749 66.8305C51.9562 66.0868 51.7969 65.1956 51.7969 64.1568V56.8086H54.3112V63.9797C54.3112 64.5109 54.3702 65.0126 54.4883 65.4848C54.6063 65.9451 54.8247 66.3524 55.1434 66.7065C55.4621 67.0607 55.8989 67.3381 56.4537 67.5387C57.0203 67.7394 57.7463 67.8397 58.6316 67.8397C59.5169 67.8397 60.237 67.7394 60.7918 67.5387C61.3584 67.3381 61.801 67.0607 62.1198 66.7065C62.4385 66.3524 62.6569 65.9451 62.7749 65.4848C62.8929 65.0126 62.952 64.5109 62.952 63.9797V56.8086H65.4663V64.1568Z"
            fill="white"></path>
          <path
            d="M39.6296 58.9688H33.875V56.8086H47.8985V58.9688H42.1439V69.6812H39.6296V58.9688Z"
            fill="white"></path>
          <path
            d="M23.7139 56.8086H26.5824L32.8328 69.6812H30.1768L28.8311 66.7242H21.4121L20.0487 69.6812H17.375L23.7139 56.8086ZM27.8395 64.564L25.1481 58.8271L22.4568 64.564H27.8395Z"
            fill="white"></path>
          <path
            d="M0.265625 56.8086H6.4629C7.47807 56.8086 8.42832 56.9266 9.31365 57.1627C10.2108 57.387 10.9899 57.7529 11.6509 58.2605C12.3119 58.7563 12.8313 59.4114 13.2091 60.2259C13.5986 61.0286 13.7934 62.0084 13.7934 63.1652C13.7934 64.263 13.6163 65.2192 13.2622 66.0337C12.9081 66.8482 12.4123 67.5269 11.7748 68.0699C11.1374 68.6129 10.376 69.0202 9.49071 69.2917C8.60538 69.5514 7.63153 69.6812 6.56914 69.6812H0.265625V56.8086ZM5.32968 67.521C6.40388 67.521 7.31281 67.4384 8.05648 67.2731C8.81196 67.1079 9.42579 66.8482 9.89796 66.494C10.3819 66.1399 10.7302 65.6913 10.9426 65.1484C11.1669 64.6054 11.2791 63.9561 11.2791 63.2006C11.2791 62.4097 11.1669 61.7487 10.9426 61.2175C10.7184 60.6745 10.3642 60.2378 9.88025 59.9072C9.40808 59.5767 8.79426 59.3406 8.03878 59.199C7.2833 59.0455 6.38027 58.9688 5.32968 58.9688H2.77995V67.521H5.32968Z"
            fill="white"></path>
        </svg>
      </div>
    </div>
    <div class="logo-dropdown-content">
      <span class="logo-dropdown-filename">logo-dark.svg</span>
      <div class="logo-dropdown-actions">
        <button class="logo-dropdown-action" data-action="copy" data-logo="dark">Copy</button>
        <button class="logo-dropdown-action" data-action="download" data-logo="dark"
          >Download</button
        >
      </div>
    </div>
  </div>
</div>

<script>
  // Logo dropdown functionality
  function initializeLogoDropdown(dropdownId: string, triggerElementId: string = 'logo-link') {
    const logoDropdown = document.getElementById(dropdownId);
    const triggerElement = document.getElementById(triggerElementId);

    if (!logoDropdown || !triggerElement) return;

    // Prevent default context menu and show dropdown on right-click
    triggerElement.addEventListener('contextmenu', function (e) {
      e.preventDefault();

      // Position dropdown
      const rect = triggerElement.getBoundingClientRect();
      logoDropdown.style.left = rect.left + 'px';
      logoDropdown.style.top = rect.bottom + 8 + 'px';

      // Show dropdown
      logoDropdown.classList.add('logo-dropdown--visible');

      // Focus trap for accessibility
      const firstButton = logoDropdown.querySelector('.logo-dropdown-action') as HTMLButtonElement;
      if (firstButton) firstButton.focus();
    });

    // Hide dropdown when clicking outside
    document.addEventListener('click', function (e) {
      if (e.target && !logoDropdown.contains(e.target as Node) && e.target !== triggerElement) {
        logoDropdown.classList.remove('logo-dropdown--visible');
      }
    });

    // Hide dropdown on escape key
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') {
        logoDropdown.classList.remove('logo-dropdown--visible');
        triggerElement.focus();
      }
    });

    // Handle copy and download actions
    logoDropdown.addEventListener('click', async function (e) {
      if (!e.target) return;
      const button = (e.target as Element).closest('.logo-dropdown-action') as HTMLButtonElement;
      if (!button) return;

      const action = button.dataset.action;
      const logoType = button.dataset.logo;

      if (action === 'copy') {
        // Show loading state immediately
        const originalText = button.textContent;
        button.textContent = 'Copying...';
        button.disabled = true;

        try {
          // Get the SVG directly from the HTML
          const logoContainer = button.closest('.logo-dropdown-item');
          if (!logoContainer) {
            throw new Error('Could not find logo container');
          }

          // Find the SVG element within this item
          const svg = logoContainer.querySelector('svg');
          if (!svg) {
            throw new Error('Could not find SVG element');
          }

          // Get the outer HTML of the SVG
          const svgText = svg.outerHTML;
          console.log('SVG content length:', svgText.length);

          // Copy to clipboard using the reliable execCommand method
          let copySuccess = false;

          // Create a textarea element to use for copying
          const textArea = document.createElement('textarea');
          textArea.value = svgText;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          textArea.style.opacity = '0';

          // Add it to the DOM
          document.body.appendChild(textArea);

          try {
            // Select the text and copy it
            textArea.focus();
            textArea.select();

            // Execute the copy command
            copySuccess = document.execCommand('copy');

            if (!copySuccess) {
              console.log('execCommand copy failed, trying clipboard API as fallback');
              // Only try clipboard API if execCommand failed and we're in a secure context
              if (navigator.clipboard && window.isSecureContext) {
                try {
                  await navigator.clipboard.writeText(svgText);
                  copySuccess = true;
                } catch (clipboardError) {
                  console.error('Clipboard API failed:', clipboardError);
                  // We'll handle this in the outer catch block
                  throw clipboardError;
                }
              } else {
                throw new Error('Copy command failed and Clipboard API not available');
              }
            }
          } catch (error) {
            console.error('Copy failed:', error);
            throw error;
          } finally {
            // Always clean up the textarea
            document.body.removeChild(textArea);
          }

          if (copySuccess) {
            console.log('Copy successful');
            button.textContent = 'Copied!';
            setTimeout(() => {
              button.textContent = originalText;
              button.disabled = false;
            }, 1500);
          } else {
            throw new Error('Copy operation failed');
          }
        } catch (error) {
          console.error('Failed to copy logo:', error);
          button.textContent = 'Error';
          setTimeout(() => {
            button.textContent = originalText;
            button.disabled = false;
          }, 1500);
        }
      } else if (action === 'download') {
        try {
          // Get the SVG directly from the HTML
          const logoContainer = button.closest('.logo-dropdown-item');
          if (!logoContainer) {
            throw new Error('Could not find logo container');
          }

          // Find the SVG element within this item
          const svg = logoContainer.querySelector('svg');
          if (!svg) {
            throw new Error('Could not find SVG element');
          }

          // Get the outer HTML of the SVG
          const svgText = svg.outerHTML;
          console.log('SVG content length:', svgText.length);

          // Convert SVG text to a blob
          const svgBlob = new Blob([svgText], { type: 'image/svg+xml' });

          // Create download link
          const downloadLink = document.createElement('a');
          downloadLink.href = URL.createObjectURL(svgBlob);
          downloadLink.download = `logo-datum-${logoType}.svg`;
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);

          // Clean up object URL
          URL.revokeObjectURL(downloadLink.href);

          // Visual feedback
          const originalText = button.textContent;
          button.textContent = 'Downloaded!';
          button.disabled = true;

          setTimeout(() => {
            button.textContent = originalText;
            button.disabled = false;
          }, 1500);
        } catch (error) {
          console.error('Failed to download logo:', error);
          button.textContent = 'Error';
          setTimeout(() => {
            button.textContent = 'Download';
            button.disabled = false;
          }, 1500);
        }
      }
    });
  }

  // Initialize dropdown when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize all logo dropdowns on the page
    const dropdowns = document.querySelectorAll('.logo-dropdown');
    dropdowns.forEach((dropdown) => {
      if (dropdown.id) {
        const triggerElementId = dropdown.getAttribute('data-trigger-id') || 'logo-link';
        initializeLogoDropdown(dropdown.id, triggerElementId);
      }
    });
  });

  // Also expose the function globally for manual initialization
  (window as unknown as Record<string, unknown>).initializeLogoDropdown = initializeLogoDropdown;
</script>
