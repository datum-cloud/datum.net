---
import { getCollection } from 'astro:content';
import { getCollectionEntry } from '@utils/collectionUtils';
import FeaturedPost from './FeaturedPost.astro';
import BlogItem from './BlogItem.astro';
// import BlogFilters from './BlogFilters.astro';
import BlogPagination from './BlogPagination.astro';
import config from '@data/siteConfig.json';

// Get all published blog posts and sort them by date (newest first)
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft && new Date(data.date) <= new Date();
});

const sortedPosts = allPosts.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Set up pagination variables for the first page
const pageSize = config.pageSize;
const currentPage = 1;
const totalItems = sortedPosts.length;
const totalPages = Math.ceil(totalItems / pageSize);
// Get featured posts (first 3 newest posts)
const featuredPosts = sortedPosts.slice(0, 3);

// Get author data for featured posts
const featuredPostsWithAuthors = await Promise.all(
  featuredPosts.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// Get author data for current page posts (excluding featured posts)
const remainingPosts = sortedPosts.slice(3);
const currentPageRemainingData = remainingPosts.slice(0, pageSize - 3);
const postsWithAuthors = await Promise.all(
  currentPageRemainingData.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// Pagination setup
const baseUrl = '/blog';
const prevUrl = currentPage > 1 ? `${baseUrl}/${currentPage - 1}` : undefined;
const nextUrl = currentPage < totalPages ? `${baseUrl}/${currentPage + 1}` : undefined;
---

<div
  class="featured-posts-section fade-in--pure"
  data-reveal="fade-in--pure--visible"
  data-reveal-immediate="true"
  data-reveal-delay="100"
>
  {
    featuredPostsWithAuthors.map(({ post, authorData }) => (
      <FeaturedPost post={post} author={authorData} />
    ))
  }
</div>

<!-- <BlogFilters /> -->

<div class="blog-list">
  {postsWithAuthors.map(({ post, authorData }) => <BlogItem post={post} authorData={authorData} />)}
</div>

{
  totalPages > 1 && (
    <BlogPagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl={baseUrl}
      prevUrl={prevUrl}
      nextUrl={nextUrl}
    />
  )
}
