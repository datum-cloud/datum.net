---
import { getCollection } from 'astro:content';
import ArticleNavigation from '@components/ArticleNavigation.astro';

const {
  currentArticleId,
  categories,
  class: className,
} = Astro.props as {
  currentArticleId: string;
  class?: string;
  categories: string[];
};

const handbooks = await getCollection('handbooks', ({ id }) => id !== 'index');

// Sort handbooks by category and order for navigation
const sortedHandbooks = handbooks
  .filter((h) => !h.data.draft)
  .sort((a, b) => {
    const categoryA = a.id.split('/')[0];
    const categoryB = b.id.split('/')[0];

    // First sort by category
    if (categoryA !== categoryB) {
      const indexA = categories.indexOf(categoryA);
      const indexB = categories.indexOf(categoryB);
      return (indexA === -1 ? 999 : indexA) - (indexB === -1 ? 999 : indexB);
    }

    // Then sort by order within category
    const orderA = a.data.sidebar?.order || 0;
    const orderB = b.data.sidebar?.order || 0;
    return orderA - orderB;
  });

// Find current article index for navigation
const currentIndex = sortedHandbooks.findIndex((h) => h.id === currentArticleId);
const previousArticle = currentIndex > 0 ? sortedHandbooks[currentIndex - 1] : undefined;
const nextArticle =
  currentIndex < sortedHandbooks.length - 1 ? sortedHandbooks[currentIndex + 1] : undefined;
---

<ArticleNavigation
  previousArticle={previousArticle
    ? {
        id: previousArticle.id,
        title: previousArticle.data.title,
        url: `/handbook/${previousArticle.id}/`,
      }
    : undefined}
  nextArticle={nextArticle
    ? {
        id: nextArticle.id,
        title: nextArticle.data.title,
        url: `/handbook/${nextArticle.id}/`,
      }
    : undefined}
  class={className}
/>
