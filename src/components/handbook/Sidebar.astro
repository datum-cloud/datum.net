---
import type { SidebarProps, HandbookProps } from '@/src/types/common';
import { getEntry } from 'astro:content';

const { currentArticleId = 'company/why-we-exist', class: className } = Astro.props as SidebarProps;
const { handbooks } = Astro.props as HandbookProps;

const badgeColor = {
  info: 'border-green-400 bg-green-100',
  caution: 'border-yellow-400 bg-yellow-100',
  danger: 'border-red-400 bg-red-100',
};

const menuCollection: {
  [key: string]: {
    id: string;
    index: number;
    order: number;
    label: string;
    category: string;
    url: string;
    badge?: { text: string; variant?: 'info' | 'caution' | 'danger' };
  }[];
} = {};

const getCategory = (url: string) => {
  let urlSplit = url.split('/');
  return urlSplit[0];
};

handbooks.forEach((collection) => {
  if (!collection.data.draft) {
    let label = collection.data.sidebar.label || collection.data.title;
    let order = collection.data.sidebar.order || 0;
    let category = getCategory(collection.id);

    let temp = {
      id: collection.id,
      index: 0,
      order,
      label,
      category,
      url: '/handbook/' + collection.id,
      badge: collection.data.sidebar.badge,
    };

    if (!menuCollection[category]) {
      menuCollection[category] = [];
    }

    menuCollection[category].push(temp);
    menuCollection[category].sort(function (a, b) {
      return a.order - b.order;
    });
  }
});

// ordering categories
const handbookIndex = await getEntry('handbooks', 'index');
const orderedCategories = handbookIndex?.data.contents;
const categories = orderedCategories ?? Object.keys(menuCollection);

const selectedCategory = currentArticleId ? currentArticleId.split('/')[0] : 'company';
---

<aside class:list={['handbook-sidebar', className]}>
  <nav>
    <ul>
      <li>
        <div data-orientation="vertical">
          <div data-state="open" data-orientation="vertical" class="menu-container" id="menu">
            {
              categories.map((category) => {
                if (category.toLowerCase() !== 'undefined') {
                  return (
                    <div
                      x-data={`{ isExpanded: ${selectedCategory === category} }`}
                      class="menu-category"
                      id={category}
                    >
                      <h3 class="category-header">
                        <button
                          type="button"
                          class="category-button"
                          x-on:click="isExpanded = ! isExpanded"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="chevron-icon"
                            aria-hidden="true"
                            x-bind:class="isExpanded ? 'rotate-90' : ''"
                          >
                            <path d="m9 18 6-6-6-6" />
                          </svg>

                          <div class="category-title-container">
                            <span
                              class={
                                category == selectedCategory
                                  ? 'category-title--active'
                                  : 'category-title'
                              }
                            >
                              {String(category).charAt(0).toUpperCase() + String(category).slice(1)}
                            </span>
                          </div>
                        </button>
                      </h3>

                      <ul x-show="isExpanded" x-collapse class="menu-list">
                        {menuCollection[category].map((menu) => {
                          return (
                            <li class="menu-item">
                              <a
                                href={menu.url.endsWith('/') ? menu.url : menu.url + '/'}
                                class={
                                  menu.id == currentArticleId
                                    ? 'menu-link menu-link--active'
                                    : 'menu-link'
                                }
                              >
                                {menu.label}{' '}
                              </a>
                              {menu.badge ? (
                                <span
                                  class={`${badgeColor[menu.badge.variant || 'info']} menu-badge`}
                                >
                                  {menu.badge.text}
                                </span>
                              ) : null}
                            </li>
                          );
                        })}
                      </ul>
                    </div>
                  );
                }
              })
            }
          </div>
        </div>
      </li>
    </ul>
  </nav>
</aside>
