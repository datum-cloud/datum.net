---
export const prerender = false;
import { getRoadmap } from '@utils/roadmap';
import { marked } from 'marked';

const userId = Astro.cookies.get('userId')?.value || '';
const issues = await getRoadmap(userId);
---

<div class="roadmap-container">
  {
    Array.prototype.map.call(
      issues,
      (issue: {
        id: string;
        title: string;
        body: string;
        url?: string;
        vote: number;
        hasVoted: boolean;
      }) => (
        <div class="roadmap-card">
          <div class="roadmap-card--content">
            <div class="roadmap-card--vote-section">
              <div class="roadmap-card--vote-counter">
                <span id={`${issue.id}-value`} class="roadmap-card--vote-number">
                  {issue.vote}
                </span>
                <span class="roadmap-card--vote-label">votes</span>
              </div>
            </div>

            <div class="roadmap-card--info-section">
              <div class="roadmap-card--text-content">
                <h3 class="roadmap-card--title">{issue.title}</h3>
                <p class="roadmap-card--description" set:html={marked.parse(issue.body)} />
              </div>

              <div class="roadmap-card--actions">
                <button
                  class="roadmap-card--vote-button"
                  data-issueid={issue.id}
                  data-has-voted={issue.hasVoted}
                >
                  {issue.hasVoted ? 'Remove your vote' : 'Add your vote'}
                </button>

                {issue.url && (
                  <a
                    href={issue.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="roadmap-card--github-link"
                  >
                    Learn more on GitHub
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      )
    )
  }

  <script>
    import { actions } from 'astro:actions';
    import { getCookie, setCookie, getAllCookies } from '@libs/cookie';

    console.log(getAllCookies());

    const voteItems = document.querySelectorAll('.roadmap-card--content');
    let userId = getCookie('userId') as string;

    voteItems.forEach((item) => {
      const btnVote = item.querySelector('.roadmap-card--vote-button');

      btnVote?.addEventListener('click', async function (this: HTMLButtonElement) {
        if (!this.dataset.issueid) {
          throw new Error('ProjectID is missing');
        }

        if (!userId) {
          actions.loginWithDatum().then((result: { data?: object }) => {
            if (!result.data) {
              return;
            }

            const data = result.data as { authUrl: string; codeVerifier: string; nonce: string };
            const authUrl = new URL(data.authUrl);
            const codeVerifier = data.codeVerifier;
            const nonce = data.nonce;

            if (!authUrl) {
              window.location.href = '/resources/roadmap';
            } else {
              setCookie('codeVerifier', codeVerifier ?? '', 60 * 24);
              setCookie('nonce', nonce ?? '', 60 * 24);
              setCookie('auth_redirect', window.location.href, 60 * 24);

              window.location.href = authUrl.toString();
            }
          });
        }

        const issueId = this.dataset.issueid;
        const issueHasVoted = this.dataset.hasVoted === 'true';
        let isSuccess;

        if (issueHasVoted) {
          isSuccess = await actions.unvote({ userId, issueId });
        } else {
          isSuccess = await actions.vote({ userId, issueId });
        }

        if (isSuccess) {
          window.location.reload();
        }
      });
    });
  </script>
</div>
