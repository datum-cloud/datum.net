---
import config from 'virtual:starlight/user-config';

import MobileMenuToggle from 'virtual:starlight/components/MobileMenuToggle';
import Search from 'virtual:starlight/components/Search';
// import CustomSidebar from './CustomSidebar.astro';

import FooterDocs from '@components/FooterDocs.astro';

const { hasSidebar } = Astro.locals.starlightRoute;

/**
 * Render the `Search` component if Pagefind is enabled or the default search component has been overridden.
 */
const shouldRenderSearch =
  config.pagefind || config.components.Search !== '@astrojs/starlight/components/Search.astro';
---

<div class="page">
  <header class="sl-header">
    <slot name="header" />
  </header>
  <div class="datum-container flex items-center justify-center">
    <div class="w-full px-6 md:px-16">
      <div class="main-frame">
        {hasSidebar && <MobileMenuToggle />}

        {
          hasSidebar && (
            <nav class="sidebar" aria-label={Astro.locals.t('sidebarNav.accessibleLabel')}>
              <div id="starlight__sidebar" class="sidebar-pane" data-lenis-prevent>
                <div class="sidebar-content sl-flex">
                  <div class="sl-flex print:hidden">{shouldRenderSearch && <Search />}</div>
                  <slot name="sidebar" />
                </div>
              </div>
            </nav>
          )
        }

        <slot />
      </div>
    </div>
  </div>

  <FooterDocs />
</div>

<style>
  @layer starlight.core {
    /* Mobile and small screens: Show sidebar when menu is expanded */
    @media (max-width: 767px) {
      :global([data-mobile-menu-expanded]) .sidebar {
        display: block !important;
      }

      :global([data-mobile-menu-expanded]) .sidebar-pane {
        display: block !important;
        visibility: visible !important;
        position: fixed;
        top: 119px;
        left: 0;
        height: 100vh;
        background-color: var(--sl-color-bg);
        z-index: var(--sl-z-index-menu);
      }
    }

    /* Medium screens and up: Show sidebar by default */
    @media (min-width: 768px) {
      .sidebar-pane {
        --sl-sidebar-visibility: visible;
      }

      .sidebar-content::after {
        content: '';
        padding-bottom: 1px;
      }
    }

    /* Legacy breakpoint for compatibility */
    @media (min-width: 50rem) {
      :global([data-has-sidebar]) .header {
        padding-inline-end: var(--sl-nav-pad-x);
      }
    }
  }
</style>
<script type="text/javascript" defer is:inline>
  /* eslint @typescript-eslint/no-unused-expressions: "off" */
  !(function (e, t, n) {
    function a() {
      var e = t.getElementsByTagName('script')[0],
        n = t.createElement('script');
      ((n.type = 'text/javascript'),
        (n.async = !0),
        (n.src = 'https://beacon-v2.helpscout.net'),
        e.parentNode.insertBefore(n, e));
    }
    if (
      ((e.Beacon = n =
        function (t, n, a) {
          e.Beacon.readyQueue.push({ method: t, options: n, data: a });
        }),
      (n.readyQueue = []),
      'complete' === t.readyState)
    )
      return a();
    e.attachEvent ? e.attachEvent('onload', a) : e.addEventListener('load', a, !1);
  })(window, document, window.Beacon || function () {});
</script>
{
  import.meta.env.MODE === 'production' && (
    <script type="text/javascript" defer is:inline>
      window.Beacon('init', '57a7245e-772c-4d51-bdb1-6b898f34f2cb');
    </script>
  )
}

<script>
  import '/src/v1/scripts/lenis-parallax.js';
</script>
