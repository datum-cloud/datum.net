---
// src/components/starlight/TwoColumnContent.astro

import config from 'virtual:starlight/user-config';
import PageSidebar from './PageSidebar.astro';
import { Breadcrumbs } from 'astro-breadcrumbs';
import SearchButton from './SearchButton.astro';

// Get Starlight route data
const { hasSidebar } = Astro.locals.starlightRoute;
const starlightRoute = Astro.locals.starlightRoute;

// Create breadcrumbs manually based on URL path
let breadcrumbData = [];

// Add home/docs as first item
breadcrumbData.push(
  {
    text: 'Home',
    href: '/',
  },
  {
    text: 'Docs',
    href: '/docs/',
    class: 'docs-menu-toggle',
  },
  {
    text: 'Docs',
    href: '/docs/',
    class: 'docs-md',
  }
);

// Get the current URL path
const fullPath = Astro.url.pathname;

// Extract path segments (skip the /docs/ prefix)
const pathSegments = fullPath
  .replace(/^\/?docs\//, '')
  .replace(/\/$/, '')
  .split('/')
  .filter(Boolean);

// Build breadcrumbs for each path segment
if (pathSegments.length > 0) {
  let currentPath = '';

  for (const segment of pathSegments) {
    currentPath += '/' + segment;

    // Format the segment title (capitalize words, replace dashes with spaces)
    const segmentTitle = segment
      .replace(/-/g, ' ')
      .replace(/\b\w/g, (c: string) => c.toUpperCase());

    breadcrumbData.push({
      text: segmentTitle,
      href: '/docs' + currentPath + '/',
    });
  }

  if (starlightRoute.entry?.data?.title) {
    // Replace the last item's text with the actual page title
    breadcrumbData[breadcrumbData.length - 1].text = starlightRoute.entry.data.title;
  }
}

const shouldRenderSearch =
  config.pagefind || config.components.Search !== '@astrojs/starlight/components/Search.astro';
---

<div class="sl-content-panel">
  <section class="sl-main-content">
    <div class="searchbar-main-content print:hidden">
      {shouldRenderSearch && <SearchButton class="search-button" />}
    </div>
    <Breadcrumbs
      linkTextFormat="sentence"
      crumbs={breadcrumbData.length > 0 ? breadcrumbData : undefined}
    >
      <svg
        slot="index"
        aria-label="Home Page"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"> </path>
        <polyline points="9 22 9 12 15 12 15 22"></polyline>
      </svg>
    </Breadcrumbs>

    <main data-glossary-body class="sl-content">
      <slot />
    </main>
  </section>

  {
    hasSidebar && (
      <aside class="right-sidebar-container astro-67yu43on print:hidden">
        <div class="right-sidebar astro-67yu43on">
          <PageSidebar />
        </div>
      </aside>
    )
  }
</div>

<script>
  function addDocsSmToSecondBreadcrumb() {
    // Wait until DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      const breadcrumbs = document.querySelectorAll('li.c-breadcrumbs__crumb');
      if (breadcrumbs.length <= 3) {
        breadcrumbs[1].classList.add('docs-sm');
      }
    });
  }
  addDocsSmToSecondBreadcrumb();
  document.addEventListener('DOMContentLoaded', () => {
    const docsMenuToggle = document.querySelector('.docs-menu-toggle');
    const pathSegments = window.location.pathname
      .replace(/^\/?docs\//, '')
      .replace(/\/$/, '')
      .split('/')
      .filter(Boolean);

    // Function to toggle sidebar
    const toggleSidebar = () => {
      if (window.innerWidth < 768) {
        const expanded = document.body.hasAttribute('data-mobile-menu-expanded');

        if (!expanded) {
          document.body.setAttribute('data-mobile-menu-expanded', '');
          document.body.setAttribute('data-disable-lenis', '');
          document.body.classList.add('mobile-menu-open');
          document.body.style.overflow = 'hidden';
        } else {
          document.body.removeAttribute('data-mobile-menu-expanded');
          document.body.removeAttribute('data-disable-lenis');
          document.body.classList.remove('mobile-menu-open');
          document.body.style.overflow = '';
        }
      }
    };

    // Auto-trigger toggle if we're at the root docs page
    if (pathSegments.length === 0 && window.location.pathname.includes('/docs')) {
      setTimeout(() => toggleSidebar(), 100); // Small delay to ensure DOM is fully loaded
    }

    if (docsMenuToggle) {
      docsMenuToggle.addEventListener('click', (e) => {
        // Only enable the toggle functionality on mobile screens
        if (window.innerWidth < 768) {
          // 768px is typically md breakpoint
          e.preventDefault();

          // Use the shared toggle function
          toggleSidebar();
        }
      });

      // Add resize listener to disable toggle functionality on larger screens
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768) {
          // 768px is typically md breakpoint
          // Ensure mobile menu is closed when resizing to larger screens
          document.body.removeAttribute('data-mobile-menu-expanded');
          document.body.removeAttribute('data-disable-lenis');
          document.body.classList.remove('mobile-menu-open');
          document.body.style.overflow = '';
        }
      });
    }
  });
</script>

<style>
  .search-button {
    width: 100%;
  }

  /* The SearchButton component already has its own styling,
     so we don't need to add much custom styling here */
</style>
