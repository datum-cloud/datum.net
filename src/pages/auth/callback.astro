---
export const prerender = false;

import { OIDCClient } from '@libs/oidc';
import type { callbackResult } from '@libs/oidc';
import type { UserInfoResponse, IDToken } from 'openid-client';
// import { sha256 } from '@/src/libs/file';

const oidcClient = new OIDCClient();
const currentUrl = Astro.url.toString();
const nonce = Astro.cookies.get('nonce')?.value;
const codeVerifier = Astro.cookies.get('codeVerifier')?.value;
const redirectUrl = Astro.cookies.has('auth_redirect')
  ? Astro.cookies.get('auth_redirect')?.value
  : '/';

const cookieOptions = {
  path: '/',
  sameSite: 'lax' as 'none' | 'strict' | 'lax',
  secure: true,
};

try {
  if (!codeVerifier || codeVerifier === '') {
    console.log('No code verifier found in cookies.');
    return Astro.redirect(redirectUrl);
  }

  // user already logged in, skip handleCallback
  if (Astro.cookies.get('userInfo')?.value) {
    return Astro.redirect(redirectUrl);
  } else {
    let result: callbackResult = await oidcClient.handleCallback(currentUrl, codeVerifier, nonce);
    // console.log('Callback result: ', result);
    if (!result.error) {
      const userInfo: UserInfoResponse = result.userInfo;
      const claims: IDToken | undefined = result.claims;
      const expired = new Date(claims?.exp ? claims.exp * 1000 : Date.now() + 3600 * 1000);

      Astro.cookies.set('accessToken', result.accessToken || '', {
        expires: expired,
        ...cookieOptions,
      });

      Astro.cookies.set('userInfo', userInfo, {
        expires: expired,
        ...cookieOptions,
      });
    }

    return Astro.redirect(redirectUrl);
  }
} catch (error) {
  console.error('HandleCallback error: ', error);
  return Astro.redirect(redirectUrl);
}
---

Redirecting to: {{ redirectUrl }}
