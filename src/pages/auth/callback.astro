---
import { OIDCClient } from '@libs/oidc';
import type { callbackResult } from '@libs/oidc';
import type { UserInfoResponse, IDToken } from 'openid-client';
import { sha256 } from '@/src/libs/file';
export const prerender = false;

try {
  const oidcClient = new OIDCClient();
  const currentUrl = Astro.url.toString();
  const codeVerifier = Astro.cookies.get('codeVerifier')?.value;
  const nonce = Astro.cookies.get('nonce')?.value;
  const authRedirect = Astro.cookies.get('auth_redirect')?.value ?? '/';

  if (!codeVerifier || codeVerifier === '') {
    return Astro.redirect(authRedirect);
  }

  // user already logged in, skip handleCallback
  if (Astro.cookies.get('userId')?.value) {
    return Astro.redirect(authRedirect);
  } else {
    let result: callbackResult = await oidcClient.handleCallback(currentUrl, codeVerifier, nonce);
    if (!result.error) {
      const userInfo: UserInfoResponse = result.userInfo;
      const claims: IDToken | undefined = result.claims;
      const expired = new Date(claims?.exp ? claims.exp * 1000 : Date.now() + 3600 * 1000);

      Astro.cookies.set('userId', userInfo.email ? sha256(userInfo.email) : '', {
        path: '/',
        expires: expired,
      });
    }
    return Astro.redirect(authRedirect);
  }
} catch (error) {
  console.error('HandleCallback error: ', error);
  return Astro.redirect('/');
}
---
