---
export const prerender = false;

import { OIDCClient } from '@libs/oidc';
import type { callbackResult } from '@libs/oidc';
import type { UserInfoResponse, IDToken } from 'openid-client';
import { sha256 } from '@/src/libs/file';

const oidcClient = new OIDCClient();
const currentUrl = Astro.url.toString();
const nonce = Astro.cookies.get('nonce')?.value;
const codeVerifier = Astro.cookies.get('codeVerifier')?.value;
const redirectUrl = Astro.cookies.has('auth_redirect')
  ? Astro.cookies.get('auth_redirect')?.value
  : '/';

try {
  if (!codeVerifier || codeVerifier === '') {
    return Astro.redirect(redirectUrl);
  }

  // user already logged in, skip handleCallback
  if (Astro.cookies.get('userId')?.value) {
    return Astro.redirect(redirectUrl);
  } else {
    let result: callbackResult = await oidcClient.handleCallback(currentUrl, codeVerifier, nonce);

    if (!result.error) {
      const userInfo: UserInfoResponse = result.userInfo;
      const claims: IDToken | undefined = result.claims;
      const expired = new Date(claims?.exp ? claims.exp * 1000 : Date.now() + 3600 * 1000);

      if (userInfo.email) {
        Astro.cookies.set('userId', sha256(userInfo.email), {
          path: '/',
          sameSite: 'strict',
          secure: true,
          expires: expired,
        });
      }

      if (userInfo.profile) {
        Astro.cookies.set('profile', sha256(userInfo.profile), {
          path: '/',
          sameSite: 'strict',
          secure: true,
          expires: expired,
        });
      }
    }

    return Astro.redirect(redirectUrl);
  }
} catch (error) {
  console.error('HandleCallback error: ', error);
  return Astro.redirect(redirectUrl);
}
---

Redirecting to: {{ redirectUrl }}
