---
// src/pages/authors/[slug]/[page].astro
import Layout from '@layouts/Layout.astro';
import Hero from '@components/Hero.astro';
import Footer from '@components/Footer.astro';
import GlobalSection from '@components/GlobalSection.astro';
import { getCollection } from 'astro:content';
import config from '@data/siteConfig.json';
import { getCollectionEntry } from '@utils/collectionUtils';
import BlogItem from '@components/blog/BlogItem.astro';
import BlogPagination from '@components/blog/BlogPagination.astro';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
  const authors = await getCollection('authors');
  const allPosts = await getCollection('blog', ({ data }) => {
    return !data.draft && new Date(data.date) <= new Date();
  });

  const paths = [];
  for (const author of authors) {
    const authorPosts = allPosts.filter((post) => post.data.author === author.id);
    const totalPages = Math.ceil(authorPosts.length / config.pageSize);

    for (let page = 1; page <= totalPages; page++) {
      paths.push({
        params: { slug: author.id, page: page.toString() },
        props: { author, currentPage: page },
      });
    }
  }

  return paths;
}

const { author, currentPage } = Astro.props;
const { slug } = Astro.params;

// Get all blog posts by this author
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft && data.author === slug && new Date(data.date) <= new Date();
});

const sortedPosts = allPosts.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Set up pagination
const pageSize = config.pageSize;
const totalItems = sortedPosts.length;
const totalPages = Math.ceil(totalItems / pageSize);
const start = (currentPage - 1) * pageSize;
const end = start + pageSize;
const currentPageData = sortedPosts.slice(start, end);

// Get author data for current page posts with author info
const postsWithAuthors = await Promise.all(
  currentPageData.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// Setup for Hero component
const subtitle = 'Author';
const title = author.data.name;
const icon = 'user';
const baseUrl = `/authors/${slug}`;
---

<Layout
  title={`${author.data.name} - Author - Page ${currentPage}`}
  description={author.data.bio}
  bodyClass="author-page"
>
  <section class="datum-container">
    <Hero class="light" iconName={icon} title={title} subtitle={subtitle} />

    <div class="section--block section--block--pad bg-navy dark">
      <div class="relative m-auto md:max-w-391">
        <!-- Author Info Header -->
        <div class="mb-16">
          <div class="mb-8 flex items-center gap-6">
            {
              author.data.avatar && (
                <Image
                  src={author.data.avatar}
                  alt={author.data.name}
                  class="ring-lime-green/20 h-24 w-24 rounded-full object-cover ring-4"
                  width={96}
                  height={96}
                />
              )
            }
            <div>
              <h2 class="font-alliance mb-2 text-2xl font-medium text-white">{author.data.name}</h2>
              {
                author.data.title && (
                  <p class="font-alliance text-lime-green mb-3 text-lg">{author.data.title}</p>
                )
              }
              <p class="font-alliance text-white/80">{author.data.bio}</p>
              {
                author.data.social && (
                  <div class="mt-4 flex gap-4">
                    {author.data.social.twitter && (
                      <a
                        href={author.data.social.twitter}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="font-alliance text-lime-green text-sm transition-colors hover:text-white"
                      >
                        Twitter
                      </a>
                    )}
                    {author.data.social.github && (
                      <a
                        href={author.data.social.github}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="font-alliance text-lime-green text-sm transition-colors hover:text-white"
                      >
                        GitHub
                      </a>
                    )}
                    {author.data.social.linkedin && (
                      <a
                        href={author.data.social.linkedin}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="font-alliance text-lime-green text-sm transition-colors hover:text-white"
                      >
                        LinkedIn
                      </a>
                    )}
                  </div>
                )
              }
            </div>
          </div>
        </div>

        <!-- Articles List -->
        <div class="blog-list">
          {
            postsWithAuthors.map(({ post, authorData }) => (
              <BlogItem post={post} authorData={authorData} />
            ))
          }
        </div>

        <!-- Pagination -->
        {
          totalPages > 1 && (
            <BlogPagination
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl={baseUrl}
              prevUrl={
                currentPage > 1
                  ? currentPage === 2
                    ? baseUrl
                    : `${baseUrl}/${currentPage - 1}`
                  : undefined
              }
              nextUrl={currentPage < totalPages ? `${baseUrl}/${currentPage + 1}` : undefined}
            />
          )
        }
      </div>
    </div>

    <GlobalSection />

    <Footer />
  </section>
</Layout>
