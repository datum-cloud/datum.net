---
// src/pages/blog/[page].astro
import '@v1/styles/page-blog.css';
import Layout from '@layouts/Layout.astro';
import Hero from '@components/Hero.astro';
import Footer from '@components/Footer.astro';
import GlobalSection from '@components/GlobalSection.astro';
import { getCollection } from 'astro:content';
import config from '@data/siteConfig.json';
import { getCollectionEntry } from '@utils/collectionUtils';
import BlogItem from '@components/blog/BlogItem.astro';
import BlogFilters from '@components/blog/BlogFilters.astro';
import BlogPagination from '@components/blog/BlogPagination.astro';

// Get blog landing page from blog/index.mdx
const page = await getCollectionEntry('pages', 'blog');

export async function getStaticPaths() {
  // Constants
  const BASE_URL = '/blog';
  const allPosts = await getCollection('blog', ({ data }) => {
    return !data.draft && new Date(data.date) <= new Date();
  });

  const sortedPosts = allPosts.sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  });

  const pageSize = config.pageSize;
  const totalPages = Math.ceil(sortedPosts.length / pageSize);

  return Array.from({ length: totalPages - 1 }, (_, i) => {
    const pageNum = i + 2; // Start from page 2
    const start = (pageNum - 1) * pageSize;
    const end = start + pageSize;

    return {
      params: { page: pageNum.toString() },
      props: {
        posts: sortedPosts.slice(start, end),
        currentPage: pageNum,
        totalPages: totalPages,
        baseUrl: BASE_URL,
        prevUrl: pageNum > 2 ? `${BASE_URL}/${pageNum - 1}` : BASE_URL,
        nextUrl: pageNum < totalPages ? `${BASE_URL}/${pageNum + 1}` : undefined,
      },
    };
  });
}

const { posts, currentPage, totalPages, prevUrl, nextUrl, baseUrl } = Astro.props;

// Get author data for current page posts
const postsWithAuthors = await Promise.all(
  posts.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// SEO
const fm = page.data;
const meta = fm.meta || {};
const title = fm.title;
const description = fm.description ? fm.description : '';
const subtitle = fm.subtitle ? fm.subtitle : 'Blog';

const icon = 'book-image';
---

<Layout title={title} description={description} bodyClass="page-blog" meta={meta}>
  <section class="datum-container">
    <Hero class="light" iconName={icon} title={title} subtitle={subtitle} />

    <div class="section--block section--block--pad bg-midnight-fjord dark">
      <div class="relative m-auto md:max-w-391">
        <!-- Category Filters and Search -->
        <BlogFilters />

        <!-- Blog List -->
        <div class="blog-list">
          {
            postsWithAuthors.map(({ post, authorData }) => (
              <BlogItem post={post} authorData={authorData} />
            ))
          }
        </div>

        <!-- Pagination -->
        {
          totalPages > 1 && (
            <BlogPagination
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl={baseUrl}
              prevUrl={prevUrl}
              nextUrl={nextUrl}
            />
          )
        }
      </div>
    </div>

    <GlobalSection />

    <Footer />
  </section>
</Layout>
