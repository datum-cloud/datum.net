---
// src/pages/blog/[slug].astro
import Layout from '@layouts/Layout.astro';
import Hero from '@components/Hero.astro';
import Footer from '@components/Footer.astro';
import Icon from '@v1/components/Icon.astro';
import GlobalSection from '@components/GlobalSection.astro';
import ArticleNavigation from '@components/ArticleNavigation.astro';
import { getCollection, render } from 'astro:content';
import { Image, getImage } from 'astro:assets';
import { getMetaImageUrl } from '@utils/imageUtils';
import { formatLongDate, formatISODate, estimateReadingTime } from '@utils/dateUtils';
import { getCollectionEntry } from '@utils/collectionUtils';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  const authors = await getCollection('authors');

  return blogEntries.map((entry) => {
    // Find the author data if it exists
    const authorData = authors.find((author) => author.id === entry.data.author);

    return {
      params: { slug: entry.id },
      props: { entry, authorData },
    };
  });
}

const { entry, authorData } = Astro.props;
const { Content } = await render(entry);
const formattedDate = formatLongDate(entry.data.date);
const metaImage = getMetaImageUrl(entry.data.featuredImage, entry.data.thumbnail, Astro.url.origin);

// Calculate reading time from content
const readingTime = estimateReadingTime(entry.body || '');

// Get category data for each category
const categoryData = await Promise.all(
  (entry.data.categories || []).map(async (categorySlug) => {
    return await getCollectionEntry('categories', categorySlug);
  })
);

// Get all blog entries for navigation
const allBlogEntries = await getCollection('blog');

// Get navigation articles (sorted by date, newest first)
const sortedBlogs = allBlogEntries
  .filter((b) => !b.data.draft)
  .sort((a, b) => {
    const dateA = new Date(a.data.date || 0);
    const dateB = new Date(b.data.date || 0);
    return dateB.getTime() - dateA.getTime(); // Newest first
  });

const currentIndex = sortedBlogs.findIndex((b) => b.id === entry.id);
const previousArticle = currentIndex > 0 ? sortedBlogs[currentIndex - 1] : undefined;
const nextArticle =
  currentIndex < sortedBlogs.length - 1 ? sortedBlogs[currentIndex + 1] : undefined;

// Get processed avatar URL
let processedAvatarUrl = '';
if (authorData?.data.avatar) {
  try {
    const processedImage = await getImage({
      src: authorData.data.avatar,
      width: 40,
      height: 40,
    });
    processedAvatarUrl = processedImage.src;
  } catch (error) {
    console.warn('Failed to process avatar image:', error);
  }
}

// SEO
const fm = entry.data;
const meta = fm.meta || {};
const title = meta.title ? meta.title : fm.title;
const description = meta.description ? meta.description : fm.description ? fm.description : '';
const subtitle = fm.subtitle ? fm.subtitle : 'Blog';
const icon = 'book-image';
---

<Layout
  title={title}
  description={description}
  image={metaImage}
  article={true}
  publishDate={entry.data.date}
  author={entry.data.author}
  bodyClass="blog-page"
>
  <section class="datum-container">
    <Hero class="light" iconName={icon} title={title} subtitle={subtitle} hideContent={true} />

    <section class="blog-detail bg-pearl-gray section--block section--block--pad pt-19">
      <article class="blog-article" data-pagefind-body>
        <!-- Hidden meta tags for Pagefind -->
        <span data-pagefind-meta="page_type" class="hidden" style="display: none;">post</span>
        <span data-pagefind-meta="author_name" class="hidden" style="display: none;"
          >{authorData?.data.name || entry.data.author}</span
        >
        <span data-pagefind-meta="author_avatar" class="hidden" style="display: none;"
          >{processedAvatarUrl}</span
        >
        <span data-pagefind-meta="date" class="hidden" style="display: none;"
          >{formatISODate(entry.data.date)}</span
        >
        <span data-pagefind-meta="category_name" class="hidden" style="display: none;"
          >{categoryData.length > 0 ? categoryData[0].data.name : 'Blog'}</span
        >

        <!-- Article Header -->
        <header class="blog-article-header">
          <a href="/blog" class="blog-back-button">
            <Icon name="arrow-left" size="md" />
            <span>Back to Blog</span>
          </a>
          <div class="blog-article-meta">
            <div class="blog-article-meta-content">
              <span class="blog-article-date pr-3">
                {readingTime.text}
              </span>
              {
                categoryData.length > 0 && (
                  <div class="blog-article-categories">
                    {categoryData.map((category) => (
                      <span class="blog-article-category">{category.data.name}</span>
                    ))}
                  </div>
                )
              }

              <span class="blog-article-date ml-auto block text-right">
                {formattedDate}
              </span>
            </div>
          </div>

          <h1 class="blog-article-title">
            {entry.data.title}
          </h1>

          {
            entry.data.description && (
              <p class="blog-article-description">{entry.data.description}</p>
            )
          }
        </header>

        <!-- Featured Image -->
        {
          entry.data.featuredImage && (
            <div class="blog-article-image">
              <Image
                src={entry.data.featuredImage}
                alt={entry.data.title}
                widths={[800, 1200, 1600]}
                sizes="(max-width: 800px) 800px, (max-width: 1200px) 1200px, 1600px"
              />
            </div>
          )
        }

        <!-- Article Content -->
        <div class="blog-article-content">
          <Content />
        </div>

        <!-- Author Information -->
        {
          entry.data.author && authorData && (
            <div class="blog-article-author">
              <div class="blog-article-author-avatar">
                {authorData.data.avatar ? (
                  <Image
                    src={authorData.data.avatar}
                    alt={authorData.data.name || entry.data.author}
                    class="blog-article-author-image"
                    width={52}
                    height={52}
                  />
                ) : (
                  <div class="blog-article-author-image">
                    <span class="text-lg font-bold text-gray-600">
                      {(authorData.data.name || entry.data.author).charAt(0)}
                    </span>
                  </div>
                )}
              </div>
              <span class="blog-article-author-name">
                {authorData.data.name || entry.data.author}
              </span>
            </div>
          )
        }

        <!-- Article Navigation -->
        <ArticleNavigation
          previousArticle={previousArticle
            ? {
                id: previousArticle.id,
                title: previousArticle.data.title,
                url: `/blog/${previousArticle.id}`,
              }
            : undefined}
          nextArticle={nextArticle
            ? {
                id: nextArticle.id,
                title: nextArticle.data.title,
                url: `/blog/${nextArticle.id}`,
              }
            : undefined}
        />
      </article>
    </section>

    <GlobalSection />

    <Footer />
  </section>
</Layout>
