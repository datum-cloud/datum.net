---
// src/pages/blog/[slug]/[page].astro
import '@v1/styles/page-blog.css';
import Layout from '@layouts/Layout.astro';
import Hero from '@components/Hero.astro';
import Footer from '@components/Footer.astro';
import { getCollection } from 'astro:content';
import config from '@data/siteConfig.json';
import BlogItem from '@components/blog/BlogItem.astro';
import BlogFilters from '@components/blog/BlogFilters.astro';
import BlogPagination from '@components/blog/BlogPagination.astro';
import { getCollectionEntry } from '@utils/collectionUtils';

export async function getStaticPaths() {
  const categories = await getCollection('categories');
  const allPosts = await getCollection('blog', ({ data }) => {
    return !data.draft && new Date(data.date) <= new Date();
  });

  const pageSize = config.pageSize;

  return categories.flatMap((category) => {
    // Get all posts for this category
    const categoryPosts = allPosts.filter((post) => post.data.categories?.includes(category.id));

    const sortedPosts = categoryPosts.sort((a, b) => {
      return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
    });

    const totalPages = Math.ceil(sortedPosts.length / pageSize);

    // Only generate pages if there are more than 1 page
    if (totalPages <= 1) return [];

    return Array.from({ length: totalPages - 1 }, (_, i) => {
      const pageNum = i + 2; // Start from page 2
      const start = (pageNum - 1) * pageSize;
      const end = start + pageSize;

      return {
        params: {
          slug: category.id,
          page: pageNum.toString(),
        },
        props: {
          category,
          posts: sortedPosts.slice(start, end),
          currentPage: pageNum,
          totalPages: totalPages,
          prevUrl: pageNum > 2 ? `/blog/${category.id}/${pageNum - 1}` : `/blog/${category.id}`,
          nextUrl: pageNum < totalPages ? `/blog/${category.id}/${pageNum + 1}` : undefined,
        },
      };
    });
  });
}

const { category, posts, currentPage, totalPages, prevUrl, nextUrl } = Astro.props;

// Get author data for current page posts
const postsWithAuthors = await Promise.all(
  posts.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// Pagination setup
const baseUrl = `/blog/${category.id}`;

// SEO
const fm = category.data;
const meta = fm.meta || {};
const title = fm.name;
const description = fm.description ? fm.description : '';
const subtitle = fm.subtitle ? fm.subtitle : 'Blog';

const icon = 'book-image';
---

<Layout title={title} description={description} bodyClass="page-blog" meta={meta}>
  <section class="datum-container">
    <Hero class="light" iconName={icon} title={title} subtitle={subtitle} />

    <div class="section--block section--block--pad bg-midnight-fjord dark">
      <div class="relative m-auto md:max-w-391">
        <!-- Hidden meta tag to identify this as a category page -->
        <span data-pagefind-meta="page_type" style="display: none;">category</span>

        <!-- Category Filters and Search -->
        <BlogFilters currentCategory={category.id} />

        <!-- Blog List -->
        <div class="blog-list">
          {
            postsWithAuthors.map(({ post, authorData }) => (
              <BlogItem post={post} authorData={authorData} />
            ))
          }
        </div>

        <!-- Pagination -->
        {
          totalPages > 1 && (
            <BlogPagination
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl={baseUrl}
              prevUrl={prevUrl}
              nextUrl={nextUrl}
            />
          )
        }
      </div>
    </div>

    <Footer />
  </section>
</Layout>
