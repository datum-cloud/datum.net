---
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const changelogs = await getCollection("changelog");
  const sortedChangelogs = changelogs.sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  });

  const pageSize = 3;
  const totalPages = Math.ceil(sortedChangelogs.length / pageSize);

  return Array.from({ length: totalPages - 1 }, (_, i) => {
    const pageNum = i + 2; // Start from page 2
    const start = (pageNum - 1) * pageSize;
    const end = start + pageSize;

    return {
      params: { page: pageNum.toString() },
      props: {
        entries: sortedChangelogs.slice(start, end),
        currentPage: pageNum,
        totalPages: totalPages,
        prevUrl: pageNum > 2 ? `/changelog/${pageNum - 1}` : "/changelog",
        nextUrl: pageNum < totalPages ? `/changelog/${pageNum + 1}` : undefined,
      },
    };
  });
}

const { entries, currentPage, totalPages, prevUrl, nextUrl } = Astro.props;

const renderedEntries = await Promise.all(
  entries.map(async (entry) => {
    const { Content } = await entry.render();
    return { entry, Content };
  })
);
---

<Layout title="Changelog | Datum Inc. Site">
  <div class="mx-auto max-w-4xl">
    <div class="mb-8 rounded-lg bg-white p-8 shadow-sm">
      <h1 class="mb-6 font-heading text-4xl font-bold">Changelog</h1>
      <p class="mb-8 text-gray-600">
        Track all updates and improvements to our product in one place.
      </p>

      <div class="space-y-12">
        {
          renderedEntries.map(({ entry, Content }) => (
            <div class="mb-12 border-b border-gray-200 pb-12 last:border-0">
              <div class="mb-2 flex items-center">
                <span class="rounded-full bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                  {new Date(entry.data.date).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </span>
                {entry.data.version && (
                  <span class="ml-2 rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-800">
                    v{entry.data.version}
                  </span>
                )}
              </div>
              <h2 class="mb-2 font-heading text-2xl font-bold">{entry.data.title}</h2>
              <p class="mb-6 text-gray-600">{entry.data.summary}</p>

              <div class="prose prose-sm mt-6 max-w-none">
                <Content />
              </div>
            </div>
          ))
        }
      </div>

      <!-- Pagination -->
      {
        totalPages > 1 && (
          <div class="mt-12 flex justify-center space-x-2">
            {prevUrl && (
              <a
                href={prevUrl}
                class="rounded bg-gray-100 px-4 py-2 transition hover:bg-gray-200"
                aria-label="Previous page"
              >
                &larr;
              </a>
            )}

            {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
              <a
                href={pageNum === 1 ? `/changelog` : `/changelog/${pageNum}`}
                class={`rounded px-4 py-2 transition ${
                  pageNum === currentPage
                    ? "bg-primary text-white"
                    : "bg-gray-100 hover:bg-gray-200"
                }`}
                aria-label={`Page ${pageNum}`}
                aria-current={pageNum === currentPage ? "page" : undefined}
              >
                {pageNum}
              </a>
            ))}

            {nextUrl && (
              <a
                href={nextUrl}
                class="rounded bg-gray-100 px-4 py-2 transition hover:bg-gray-200"
                aria-label="Next page"
              >
                &rarr;
              </a>
            )}
          </div>
        )
      }
    </div>
  </div>
</Layout>
