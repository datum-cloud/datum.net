---
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";

// Get all changelog entries and sort them by date (newest first)
const changelogs = await getCollection("changelog");
const sortedChangelogs = changelogs.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Set up pagination variables for the first page
const pageSize = 3;
const currentPage = 1;
const totalItems = sortedChangelogs.length;
const totalPages = Math.ceil(totalItems / pageSize);
const currentPageData = sortedChangelogs.slice(0, pageSize);

const renderedEntries = await Promise.all(
  currentPageData.map(async (changelog) => {
    const { Content } = await changelog.render();
    return { changelog, Content };
  })
);
---

<Layout title="Changelog | Datum Inc. Site">
  <div class="mx-auto max-w-4xl">
    <div class="mb-8 rounded-lg bg-white p-8 shadow-sm">
      <h1 class="mb-6 font-heading text-4xl font-bold">Changelog</h1>
      <p class="mb-8 text-gray-600">
        Track all updates and improvements to our product in one place.
      </p>

      <div class="space-y-8">
        {
          renderedEntries.map(({ changelog, Content }) => (
            <div class="mb-6 border-b border-gray-200 pb-6 last:border-0">
              <div class="mb-2 flex items-center">
                <span class="rounded-full bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                  {new Date(changelog.data.date).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </span>
                {changelog.data.version && (
                  <span class="ml-2 rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-800">
                    v{changelog.data.version}
                  </span>
                )}
              </div>
              <h2 class="mb-2 font-heading text-2xl font-bold">{changelog.data.title}</h2>
              <p class="text-gray-600">{changelog.data.summary}</p>
              <div class="prose prose-sm mt-6 max-w-none">
                <Content />
              </div>
            </div>
          ))
        }
      </div>

      <!-- Pagination -->
      {
        totalPages > 1 && (
          <div class="mt-12 flex justify-center space-x-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
              <a
                href={pageNum === 1 ? `/changelog` : `/changelog/${pageNum}`}
                class={`rounded px-4 py-2 transition ${
                  pageNum === currentPage
                    ? "bg-primary text-white"
                    : "bg-gray-100 hover:bg-gray-200"
                }`}
                aria-label={`Page ${pageNum}`}
                aria-current={pageNum === currentPage ? "page" : undefined}
              >
                {pageNum}
              </a>
            ))}

            {currentPage < totalPages && (
              <a
                href={`/changelog/2`}
                class="rounded bg-gray-100 px-4 py-2 transition hover:bg-gray-200"
                aria-label="Next page"
              >
                &rarr;
              </a>
            )}
          </div>
        )
      }
    </div>
  </div>
</Layout>
