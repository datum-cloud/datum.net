---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all changelog entries and sort them by date (newest first)
const changelogs = await getCollection('changelog');
const sortedChangelogs = changelogs.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Set up pagination variables for the first page
const pageSize = 3;
const currentPage = 1;
const totalItems = sortedChangelogs.length;
const totalPages = Math.ceil(totalItems / pageSize);
const currentPageData = sortedChangelogs.slice(0, pageSize);

const renderedEntries = await Promise.all(
  currentPageData.map(async (changelog) => {
    const { Content } = await changelog.render();
    return { changelog, Content };
  })
);
---

<Layout title="Changelog | Datum Inc. Site">
  <div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-lg shadow-sm p-8 mb-8">
      <h1 class="text-4xl font-bold mb-6 font-heading">Changelog</h1>
      <p class="text-gray-600 mb-8">
        Track all updates and improvements to our product in one place.
      </p>
      
      <div class="space-y-8">
        {renderedEntries.map(({ changelog, Content }) => (
          <div class="border-b border-gray-200 pb-6 mb-6 last:border-0">
            <div class="flex items-center mb-2">
              <span class="bg-primary/10 text-primary text-sm font-medium px-3 py-1 rounded-full">
                {new Date(changelog.data.date).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </span>
              {changelog.data.version && (
                <span class="ml-2 bg-gray-100 text-gray-800 text-sm font-medium px-3 py-1 rounded-full">
                  v{changelog.data.version}
                </span>
              )}
            </div>
            <h2 class="text-2xl font-bold font-heading mb-2">
              {changelog.data.title}
            </h2>
            <p class="text-gray-600">
              {changelog.data.summary}
            </p>
            <div class="prose prose-sm mt-6 max-w-none">
              <Content />
            </div>
          </div>
        ))}
      </div>
      
      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="flex justify-center mt-12 space-x-2">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
            <a
              href={pageNum === 1 ? `/changelog` : `/changelog/${pageNum}`}
              class={`px-4 py-2 rounded transition ${
                pageNum === currentPage
                  ? 'bg-primary text-white'
                  : 'bg-gray-100 hover:bg-gray-200'
              }`}
              aria-label={`Page ${pageNum}`}
              aria-current={pageNum === currentPage ? 'page' : undefined}
            >
              {pageNum}
            </a>
          ))}
          
          {currentPage < totalPages && (
            <a 
              href={`/changelog/2`}
              class="px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded transition"
              aria-label="Next page"
            >
              &rarr;
            </a>
          )}
        </div>
      )}
    </div>
  </div>
</Layout>