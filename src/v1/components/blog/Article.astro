---
// src/v1/components/blog/Article.astro
import { getCollection, render } from 'astro:content';
import { Image } from 'astro:assets';
import type { ArticleProps } from '@/src/types/common';
import ArticleNavigation from '@v1/components/ArticleNavigation.astro';
import { estimateReadingTime } from '@utils/dateUtils';

const { articleId: propArticleId, class: className } = Astro.props as ArticleProps;

// Support both prop-based and URL parameter-based article loading
const urlParam = Astro.url.searchParams.get('article');
const articleId = propArticleId || urlParam || 'learning-from-dying-networks';

const blogs = await getCollection('blog');

// Get the specified article for main content display
const mainArticleEntry =
  blogs.find((h) => h.id === articleId) ||
  blogs.find((h) => h.id === 'learning-from-dying-networks');

// Render the article content
const mainArticle = mainArticleEntry ? await render(mainArticleEntry) : null;

// Get author information
const authors = await getCollection('authors');
const author = mainArticleEntry?.data.author
  ? authors.find((a) => a.id === mainArticleEntry.data.author)
  : null;

// Get category information
const categories = await getCollection('categories');
const getCategoryName = (slug: string) => {
  const category = categories.find((c) => c.id === slug);
  return category?.data.name || slug.replace(/-/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase());
};

// Get navigation articles
const sortedBlogs = blogs
  .filter((b) => !b.data.draft)
  .sort((a, b) => {
    const dateA = new Date(a.data.date || 0);
    const dateB = new Date(b.data.date || 0);
    return dateB.getTime() - dateA.getTime(); // Newest first
  });

const currentIndex = sortedBlogs.findIndex((b) => b.id === articleId);
const previousArticle = currentIndex > 0 ? sortedBlogs[currentIndex - 1] : undefined;
const nextArticle =
  currentIndex < sortedBlogs.length - 1 ? sortedBlogs[currentIndex + 1] : undefined;

// Format date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  }).format(date);
};

// Calculate reading time for the main article
const readingTime = mainArticleEntry
  ? estimateReadingTime(mainArticleEntry.body || '')
  : { text: '5 minutes read' };
---

<section class:list={['blog-detail bg-light-gray section--block section--block--pad', className]}>
  <article class:list={['blog-article', className]}>
    {/* Article Header */}
    <header class="blog-article-header">
      <div class="blog-article-meta">
        <div class="blog-article-meta-content">
          <span class="blog-article-date">
            {mainArticleEntry?.data.date ? formatDate(new Date(mainArticleEntry.data.date)) : ''} | {
              readingTime.text
            }
          </span>
          {
            mainArticleEntry?.data.categories && mainArticleEntry.data.categories.length > 0 && (
              <div class="blog-article-categories">
                {mainArticleEntry.data.categories.map((category: string) => (
                  <span class="blog-article-category">{getCategoryName(category)}</span>
                ))}
              </div>
            )
          }
        </div>
      </div>

      <h1 class="blog-article-title">
        {mainArticleEntry?.data.title || 'Article Not Found'}
      </h1>

      <p class="blog-article-description">
        {
          mainArticleEntry?.data.description ||
            'We have just concluded Launch Week 15 with so many new updates, but no launch week is complete without a hackathon! The Datum Launch Week 15 Hackathon begins now! Open your favorite IDE or AI agent and start building!'
        }
      </p>
    </header>

    {/* Featured Image */}
    {
      mainArticleEntry?.data.featuredImage && (
        <div class="blog-article-image">
          <Image
            src={mainArticleEntry.data.featuredImage}
            alt={mainArticleEntry.data.title || 'Blog post image'}
          />
        </div>
      )
    }

    {/* Article Content */}
    <div class="blog-article-content">
      {
        mainArticle?.Content ? (
          <mainArticle.Content />
        ) : (
          <div class="blog-article-error">
            <p>
              No content found for article ID: <strong>{articleId}</strong>
            </p>
            {mainArticleEntry ? (
              <p>Article entry found but content failed to render.</p>
            ) : (
              <p>
                Article entry not found. Available articles: {blogs.map((h) => h.id).join(', ')}
              </p>
            )}
          </div>
        )
      }
    </div>

    {/* Author article */}
    {
      author && (
        <div class="blog-article-author">
          <div class="blog-article-author-avatar">
            {author.data.avatar && (
              <Image
                src={author.data.avatar}
                alt={author.data.name || 'Author'}
                class="blog-article-author-image"
              />
            )}
          </div>
          <span class="blog-article-author-name">{author.data.name || 'Unknown Author'}</span>
        </div>
      )
    }

    {/* Article Navigation */}
    <ArticleNavigation
      previousArticle={previousArticle
        ? {
            id: previousArticle.id,
            title: previousArticle.data.title,
            url: `/blog/${previousArticle.id}`,
          }
        : undefined}
      nextArticle={nextArticle
        ? {
            id: nextArticle.id,
            title: nextArticle.data.title,
            url: `/blog/${nextArticle.id}`,
          }
        : undefined}
    />
  </article>
</section>
