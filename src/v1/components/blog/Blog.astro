---
// src/v1/components/blog/Blog.astro
import { getCollection } from 'astro:content';
import { getCollectionEntry } from '@utils/collectionUtils';
import FeaturedPost from './FeaturedPost.astro';
import BlogItem from './BlogItem.astro';
import BlogFilters from './BlogFilters.astro';
import BlogPagination from './BlogPagination.astro';
import config from '@data/siteConfig.json';

// Get all published blog posts and sort them by date (newest first)
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft && new Date(data.date) <= new Date();
});

const sortedPosts = allPosts.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Set up pagination variables for the first page
const pageSize = config.pageSize;
const currentPage = 1;
const totalItems = sortedPosts.length;
const totalPages = Math.ceil(totalItems / pageSize);
const currentPageData = sortedPosts.slice(0, pageSize);

// Get featured post (first/newest post)
const featuredPost = sortedPosts[0];

// Get author data for current page posts
const postsWithAuthors = await Promise.all(
  currentPageData.map(async (post) => {
    let authorData = null;
    if (post.data.author) {
      authorData = await getCollectionEntry('authors', post.data.author);
    }
    return { post, authorData };
  })
);

// Get featured post author data
let featuredAuthor = null;
if (featuredPost?.data.author) {
  featuredAuthor = await getCollectionEntry('authors', featuredPost.data.author);
}

// Pagination setup
const baseUrl = '/v1/blog';
const prevUrl = currentPage > 1 ? `${baseUrl}/${currentPage - 1}` : undefined;
const nextUrl = currentPage < totalPages ? `${baseUrl}/${currentPage + 1}` : undefined;
---

<div class="relative m-auto md:max-w-391">
  <!-- Featured Article Section -->
  {featuredPost && <FeaturedPost post={featuredPost} author={featuredAuthor} />}

  <!-- Category Filters and Search -->
  <BlogFilters />

  <!-- Blog List -->
  <div class="blog-list">
    {
      postsWithAuthors.map(({ post, authorData }) => (
        <BlogItem post={post} authorData={authorData} />
      ))
    }
  </div>

  <!-- Pagination -->
  {
    totalPages > 1 && (
      <BlogPagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={baseUrl}
        prevUrl={prevUrl}
        nextUrl={nextUrl}
      />
    )
  }
</div>
