---
// src/v1/components/handbook/Article.astro
import { getCollection, render } from 'astro:content';
import Sidebar from '@v1/components/handbook/Sidebar.astro';
import ArticleNavigation from '@v1/components/ArticleNavigation.astro';
import type { ArticleProps } from '@/src/types/common';

const {
  articleId: propArticleId,
  showSidebar = true,
  class: className,
} = Astro.props as ArticleProps;

// Support both prop-based and URL parameter-based article loading
const urlParam = Astro.url.searchParams.get('article');
const articleId = propArticleId || urlParam || 'company/why-we-exist';

const handbooks = await getCollection('handbooks');

// Get the specified article for main content display
const mainArticleEntry =
  handbooks.find((h) => h.id === articleId) ||
  handbooks.find((h) => h.id === 'company/why-we-exist');

// Render the article content
const mainArticle = mainArticleEntry ? await render(mainArticleEntry) : null;

// Get navigation articles for handbook
const sortedHandbooks = handbooks
  .filter((h) => !h.data.draft)
  .sort((a, b) => {
    const categoryA = a.id.split('/')[0];
    const categoryB = b.id.split('/')[0];

    // First sort by category
    if (categoryA !== categoryB) {
      const categoryOrder = ['company', 'people', 'engineering', 'go-to-market'];
      const indexA = categoryOrder.indexOf(categoryA);
      const indexB = categoryOrder.indexOf(categoryB);
      return (indexA === -1 ? 999 : indexA) - (indexB === -1 ? 999 : indexB);
    }

    // Then sort by order within category
    const orderA = a.data.sidebar?.order || 0;
    const orderB = b.data.sidebar?.order || 0;
    return orderA - orderB;
  });

const currentIndex = sortedHandbooks.findIndex((h) => h.id === articleId);
const previousArticle = currentIndex > 0 ? sortedHandbooks[currentIndex - 1] : undefined;
const nextArticle =
  currentIndex < sortedHandbooks.length - 1 ? sortedHandbooks[currentIndex + 1] : undefined;
---

<section
  class:list={['handbook-article bg-light-gray section--block section--block--pad', className]}
>
  <div class:list={['handbook-container', !showSidebar && 'handbook-container--no-sidebar']}>
    {showSidebar && <Sidebar currentArticleId={articleId} />}

    {/* Main Content Area */}
    <article class="handbook-content">
      <header class="article-header">
        <h1 class="article-title">
          {mainArticleEntry?.data.title || 'Why does Datum exist?'}
        </h1>
      </header>

      <div class="article-body">
        {
          mainArticle?.Content ? (
            <mainArticle.Content />
          ) : (
            <div class="article-paragraph">
              <p>
                No content found for article ID: <strong>{articleId}</strong>
              </p>
              {mainArticleEntry ? (
                <p>Article entry found but content failed to render.</p>
              ) : (
                <p>
                  Article entry not found. Available articles:{' '}
                  {handbooks.map((h) => h.id).join(', ')}
                </p>
              )}
            </div>
          )
        }
      </div>

      {/* Navigation */}
      <ArticleNavigation
        previousArticle={previousArticle
          ? {
              id: previousArticle.id,
              title: previousArticle.data.title,
              url: `/v1/about/handbook/${previousArticle.id}`,
            }
          : undefined}
        nextArticle={nextArticle
          ? {
              id: nextArticle.id,
              title: nextArticle.data.title,
              url: `/v1/about/handbook/${nextArticle.id}`,
            }
          : undefined}
      />
    </article>
  </div>
</section>
